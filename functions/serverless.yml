service: cloud-learning-platform

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    USER_POOL_ID: ${param:USER_POOL_ID}
    CLIENT_ID: ${param:CLIENT_ID}
    FRONTEND_URL: ${param:FRONTEND_URL, 'https://cbep.vercel.app'}
    BUCKET_NAME: cbep-course-resources
  iamRoleStatements:
    - Effect: Allow
      Action:
        - chime:CreateMeeting
        - chime:CreateAttendee
        - chime:GetMeeting
        - chime:DeleteMeeting
        - chime:DeleteAttendee
        - chime:ListAttendees
        - chime:ListMeetings
        - chime:GetAttendee
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/Classes
        - arn:aws:dynamodb:${self:provider.region}:*:table/Classes/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/Courses
        - arn:aws:dynamodb:${self:provider.region}:*:table/Courses/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/Enrollments
        - arn:aws:dynamodb:${self:provider.region}:*:table/Meetings
        - arn:aws:dynamodb:${self:provider.region}:*:table/Meetings/index/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/Resources
        - arn:aws:dynamodb:${self:provider.region}:*:table/Resources/index/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::cbep-course-resources
        - arn:aws:s3:::cbep-course-resources/*
    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:ListUsers
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminDeleteUser

      Resource:
        - arn:aws:cognito-idp:eu-north-1:*:userpool/${self:provider.environment.USER_POOL_ID}
        - arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.environment.USER_POOL_ID}


functions:
  chimeEventHandler:
    handler: handler.processEvent
    events:
      - eventBridge:
          pattern:
            source:
              - "aws.chime"
            detail-type:
              - "Chime Meeting State Change" # Adjust for specific events (e.g., "Chime Meeting Ended")
              
  updateCourseTeacher:
    handler: handler.updateCourseTeacher
    events:
      - http:
          path: courses/{courseId}/teacher
          method: put
          cors: true
          request:
            parameters:
              paths:
                courseId: true

  getMeetingStatus:
    handler: handler.getMeetingStatus
    events:
      - http:
          path: meetings/{meetingId}/status
          method: get
          cors: true
          request:
            parameters:
              paths:
                meetingId: true

  getCourseResources:
    handler: handler.getCourseResources
    events:
      - http:
          path: courses/{courseId}/resources
          method: get
          cors: true
          request:
            parameters:
              paths:
                courseId: true

  createCourseResource:
    handler: handler.createCourseResource
    events:
      - http:
          path: courses/{courseId}/resources
          method: post
          cors: true
          request:
            parameters:
              paths:
                courseId: true

  deleteCourseResource:
    handler: handler.deleteCourseResource
    events:
      - http:
          path: courses/{courseId}/resources/{resourceId}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                courseId: true
                resourceId: true

  getResourceUploadUrl:
    handler: handler.getResourceUploadUrl
    events:
      - http:
          path: resources/upload-url
          method: post
          cors: true

  createMeeting:
    handler: handler.createMeeting
    events:
      - http:
          path: create-meeting
          method: post
          cors: true

  joinMeeting:
    handler: handler.joinMeeting
    events:
      - http:
          path: courses/{courseId}/join
          method: get
          cors: true

  assignRole:
    handler: handler.assignRole
    events:
      - http:
          path: users/role
          method: post
          cors: true

  createCourse:
    handler: handler.createCourse
    events:
      - http:
          path: courses
          method: post
          cors: true

  deleteCourse:
    handler: handler.deleteCourse
    events:
      - http:
          path: courses/{courseId}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                courseId: true

  enrollStudent:
    handler: handler.enrollStudent
    events:
      - http:
          path: courses/{courseId}/enroll
          method: post
          cors: true

  unenrollStudent:
    handler: handler.unenrollStudent
    events:
      - http:
          path: courses/{courseId}/student
          method: delete
          cors: true
          request:
            parameters:
              paths:
                courseId: true

  getCourses:
    handler: handler.getCourses
    events:
      - http:
          path: courses
          method: get
          cors: true

  getCourseDetails:
    handler: handler.getCourseDetails
    events:
      - http:
          path: courses/{courseId}
          method: get
          cors: true

  getCourseMetadata:
    handler: handler.getCourseMetadata
    events:
      - http:
          path: courses/metadata
          method: get
          cors: true

  getAcademicTerms:
    handler: handler.getAcademicTerms
    events:
      - http:
          path: academic/terms
          method: get
          cors: true

  getCurrentTerm:
    handler: handler.getCurrentTerm
    events:
      - http:
          path: academic/current-term
          method: get
          cors: true

  getDepartments:
    handler: handler.getDepartments
    events:
      - http:
          path: academic/departments
          method: get
          cors: true

  createUser:
    handler: handler.createUser
    events:
      - http:
          path: users
          method: post
          cors: true

  deleteUser:
    handler: handler.deleteUser
    events:
      - http:
          path: users
          method: delete
          cors: true

  listUsers:
    handler: handler.listUsers
    events:
      - http:
          path: users
          method: get
          cors: true

  assignUserRole:
    handler: handler.assignUserRole
    events:
      - http:
          path: users/role
          method: post
          cors: true

  # Teacher-specific endpoints
  getTeacherCourses:
    handler: handler.getTeacherCourses
    events:
      - http:
          path: courses/teacher
          method: get
          cors: true

  getTeacherActiveSessions:
    handler: handler.getTeacherActiveSessions
    events:
      - http:
          path: courses/teacher/active-sessions
          method: get
          cors: true

  endTeacherSession:
    handler: handler.endTeacherSession
    events:
      - http:
          path: courses/{courseId}/end-session
          method: post
          cors: true
          request:
            parameters:
              paths:
                courseId: true

  getCourseStudents:
    handler: handler.getCourseStudents
    events:
      - http:
          path: courses/{courseId}/students
          method: get
          cors: true
          request:
            parameters:
              paths:
                courseId: true

  getDashboardStats:
    handler: handler.getDashboardStats
    events:
      - http:
          path: dashboard/stats
          method: get
          cors: true

plugins:
  - serverless-offline

resources:
  Resources:
    CoursesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Courses
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: teacherId
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TeacherIndex
            KeySchema:
              - AttributeName: teacherId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    EnrollmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Enrollments
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    MeetingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Meetings
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: meetingId
            AttributeType: S
        KeySchema:
          - AttributeName: courseId # Primary Key: Partition Key
            KeyType: HASH
          # - AttributeName: meetingId # Primary Key: Sort Key (optional)
          #   KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: MeetingIdIndex # GSI to query by meetingId alone
            KeySchema:
              - AttributeName: meetingId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # Project all attributes
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ResourcesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Resources
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: resourceId
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
          - AttributeName: resourceId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # ResourcesBucketPolicy:

    CourseResourcesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - ${self:provider.environment.FRONTEND_URL}
                - http://localhost:5173
              MaxAge: 3000
              ExposedHeaders:
                - ETag
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2

    CourseResourcesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref CourseResourcesBucket
        PolicyDocument:
          Statement:
            - Sid: AllowGetObjectWithReferer
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource:
                !Join ["", ["arn:aws:s3:::", !Ref CourseResourcesBucket, "/*"]]
              Condition:
                StringLike:
                  "aws:Referer":
                    - ${self:provider.environment.FRONTEND_URL}/*
                    - http://localhost:5173/*
