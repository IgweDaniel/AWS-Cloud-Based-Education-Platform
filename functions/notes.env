sls logs -f getStreamInfo -t


const { Kinesis } = require("@aws-sdk/client-kinesis");

const {
  KinesisVideoClient,
  DescribeSignalingChannelCommand,
  CreateSignalingChannelCommand,
  GetSignalingChannelEndpointCommand,
  CreateStreamCommand,
  DescribeStreamCommand,
} = require("@aws-sdk/client-kinesis-video");

const region = "eu-north-1";

const kinesisVideo = new Kinesis({
  region: region,
});

const client = new KinesisVideoClient({ region });

module.exports.createStream = async (event) => {
  const { streamName } = JSON.parse(event.body);

  try {
    // Check if stream exists
    const describeCommand = new DescribeStreamCommand({
      StreamName: streamName,
    });
    const data = await client.send(describeCommand);

    return {
      statusCode: 200,
      body: JSON.stringify({ streamARN: data.StreamInfo.StreamARN }),
    };
  } catch (err) {
    if (err.code === "ResourceNotFoundException" || err.code === "ENOTFOUND") {
      // Create a new stream if not found
      const createCommand = new CreateStreamCommand({
        StreamName: streamName,
        DataRetentionInHours: 24,
      });
      const data = await client.send(createCommand);
      return {
        statusCode: 200,
        body: JSON.stringify({ streamARN: data.StreamARN }),
      };
    }
    return {
      statusCode: 500,
      body: JSON.stringify({ error: err.message }),
    };
  }
};

module.exports.getEndpoints = async (event) => {
  const { channelARN, role } = event.queryStringParameters;

  try {
    const params = {
      ChannelARN: channelARN,
      SingleMasterChannelEndpointConfiguration: {
        Protocols: ["WSS"], // Use WebSocket signaling
        Role: role,
      },
    };
    const data = await kinesisVideo
      .getSignalingChannelEndpoint(params)
      .promise();

    return {
      statusCode: 200,
      body: JSON.stringify({ endpoints: data.ResourceEndpointList }),
    };
  } catch (err) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: err.message }),
    };
  }
};

module.exports.getStreamInfo = async (event) => {
  const { classId } = event.queryStringParameters;

  try {
    console.log("classId", classId);
    console.log("checking if stream exists");

    // First check if signaling channel exists
    const channelName = `class-${classId}`;

    try {
      const describeParams = {
        ChannelName: channelName,
      };

      let command = new DescribeSignalingChannelCommand(describeParams);
      const channelData = await client.send(command);
      console.log("checking if stream exists,HERE");
      // const channelData = await kinesisVideo
      //   .describeSignalingChannel(describeParams)
      //   .promise();

      // Get signaling endpoints
      command = new GetSignalingChannelEndpointCommand({
        ChannelARN: channelData.ChannelInfo.ChannelARN,
        SingleMasterChannelEndpointConfiguration: {
          Protocols: ["WSS", "HTTPS"],
          Role: "MASTER",
        },
      });
      const endpointResponse = await client.send(command);
      console.log("checking if stream exists,HERE singalEndpont");
      // const endpointResponse = await kinesisVideo
      //   .getSignalingChannelEndpoint({
      //     ChannelARN: channelData.ChannelInfo.ChannelARN,
      //     SingleMasterChannelEndpointConfiguration: {
      //       Protocols: ["WSS", "HTTPS"],
      //       Role: "MASTER",
      //     },
      //   })
      //   .promise();

      return {
        statusCode: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify({
          channelARN: channelData.ChannelInfo.ChannelARN,
          signalingEndpoint:
            endpointResponse.ResourceEndpointList[0].ResourceEndpoint,
        }),
      };
    } catch (err) {
      console.log("ERR", err.code, err);

      if (err.code === "ResourceNotFoundException") {
        console.log("stream does not exists");

        // Create new signaling channel if not exists
        const createParams = {
          ChannelName: channelName,
          ChannelType: "SINGLE_MASTER",
        };

        let command = new CreateSignalingChannelCommand(createParams);
        const newChannelData = await client.send(command);
        console.log("stream does not exists,HERE");
        // const newChannelData = await kinesisVideo
        //   .createSignalingChannel(createParams)
        //   .promise();

        // Get signaling endpoints for new channel
        command = new GetSignalingChannelEndpointCommand({
          ChannelARN: newChannelData.ChannelARN,
          SingleMasterChannelEndpointConfiguration: {
            Protocols: ["WSS", "HTTPS"],
            Role: "MASTER",
          },
        });
        const endpointResponse = await client.send(command);
        console.log("stream does not exists,HERE singalEndpont");

        //         const endpointResponse = await kinesisVideo
        //           .getSignalingChannelEndpoint({
        //             ChannelARN: newChannelData.ChannelARN,
        //             SingleMasterChannelEndpointConfiguration: {
        //               Protocols: ["WSS", "HTTPS"],
        //               Role: "MASTER",
        //             },
        //           })
        //           .promise();

        return {
          statusCode: 200,
          headers: {
            "Access-Control-Allow-Origin": "*",
          },
          body: JSON.stringify({
            channelARN: newChannelData.ChannelARN,
            signalingEndpoint:
              endpointResponse.ResourceEndpointList[0].ResourceEndpoint,
          }),
        };
      }
      throw err;
    }
  } catch (err) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({ error: err.message }),
    };
  }
};

module.exports.createSignalingChannel = async (event) => {
  const { channelName } = JSON.parse(event.body);

  try {
    const params = {
      ChannelName: channelName,
      ChannelType: "SINGLE_MASTER",
    };
    const data = await kinesisVideo.createSignalingChannel(params).promise();

    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({ channelARN: data.ChannelARN }),
    };
  } catch (err) {
    return {
      statusCode: 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({ error: err.message }),
    };
  }
};
